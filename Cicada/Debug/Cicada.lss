
Cicada.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000015a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000366  00800060  0000015a  000001ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008003c6  008003c6  00000554  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000554  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000584  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000005c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005d2  00000000  00000000  000005f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000504  00000000  00000000  00000bca  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000271  00000000  00000000  000010ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000009c  00000000  00000000  00001340  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002fb  00000000  00000000  000013dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000cb  00000000  00000000  000016d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  000017a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	60 c0       	rjmp	.+192    	; 0xd2 <__vector_8>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	13 e0       	ldi	r17, 0x03	; 3
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ea e5       	ldi	r30, 0x5A	; 90
  3a:	f1 e0       	ldi	r31, 0x01	; 1
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a6 3c       	cpi	r26, 0xC6	; 198
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	23 e0       	ldi	r18, 0x03	; 3
  4a:	a6 ec       	ldi	r26, 0xC6	; 198
  4c:	b3 e0       	ldi	r27, 0x03	; 3
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	aa 3c       	cpi	r26, 0xCA	; 202
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	10 d0       	rcall	.+32     	; 0x7a <main>
  5a:	7d c0       	rjmp	.+250    	; 0x156 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <startTimer>:
    }
}

void startTimer() {
	//Timer/Counter 1 start 1/8
	TCCR1B &= ~(1<<CS10);
  5e:	8e b5       	in	r24, 0x2e	; 46
  60:	8e 7f       	andi	r24, 0xFE	; 254
  62:	8e bd       	out	0x2e, r24	; 46
	TCCR1B |= (1<<CS11);
  64:	8e b5       	in	r24, 0x2e	; 46
  66:	82 60       	ori	r24, 0x02	; 2
  68:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(1<<CS12);
  6a:	8e b5       	in	r24, 0x2e	; 46
  6c:	8b 7f       	andi	r24, 0xFB	; 251
  6e:	8e bd       	out	0x2e, r24	; 46

	TCNT1 = 65530;
  70:	8a ef       	ldi	r24, 0xFA	; 250
  72:	9f ef       	ldi	r25, 0xFF	; 255
  74:	9d bd       	out	0x2d, r25	; 45
  76:	8c bd       	out	0x2c, r24	; 44
  78:	08 95       	ret

0000007a <main>:
	startTimer();
}

int main(void)
{
	simpeSize = sizeof(voice)/sizeof(char);
  7a:	85 e6       	ldi	r24, 0x65	; 101
  7c:	93 e0       	ldi	r25, 0x03	; 3
  7e:	90 93 c9 03 	sts	0x03C9, r25	; 0x8003c9 <simpeSize+0x1>
  82:	80 93 c8 03 	sts	0x03C8, r24	; 0x8003c8 <simpeSize>

	//Normal PWM non-inverting mode
	TCCR1A &= ~(1<<COM1A0);
  86:	8f b5       	in	r24, 0x2f	; 47
  88:	8f 7b       	andi	r24, 0xBF	; 191
  8a:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1<<COM1A1);
  8c:	8f b5       	in	r24, 0x2f	; 47
  8e:	80 68       	ori	r24, 0x80	; 128
  90:	8f bd       	out	0x2f, r24	; 47

	//Fast PWM 8-bit
	TCCR1A |= (1<<WGM10);
  92:	8f b5       	in	r24, 0x2f	; 47
  94:	81 60       	ori	r24, 0x01	; 1
  96:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~(1<<WGM11);
  98:	8f b5       	in	r24, 0x2f	; 47
  9a:	8d 7f       	andi	r24, 0xFD	; 253
  9c:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM12);
  9e:	8e b5       	in	r24, 0x2e	; 46
  a0:	88 60       	ori	r24, 0x08	; 8
  a2:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(1<<WGM13);
  a4:	8e b5       	in	r24, 0x2e	; 46
  a6:	8f 7e       	andi	r24, 0xEF	; 239
  a8:	8e bd       	out	0x2e, r24	; 46

	//Timer/Counter 1 overflow interrupt settings
	//Interrupt enable
	TIMSK |= (1<<2);
  aa:	89 b7       	in	r24, 0x39	; 57
  ac:	84 60       	ori	r24, 0x04	; 4
  ae:	89 bf       	out	0x39, r24	; 57

	OCR1A = 0;
  b0:	1b bc       	out	0x2b, r1	; 43
  b2:	1a bc       	out	0x2a, r1	; 42

	startTimer();
  b4:	d4 df       	rcall	.-88     	; 0x5e <startTimer>

	//Power managment - Open
	DDRD |= (1<<0);
  b6:	88 9a       	sbi	0x11, 0	; 17
	PORTD |= (1<<0);
  b8:	90 9a       	sbi	0x12, 0	; 18

	sei();
  ba:	78 94       	sei
  bc:	ff cf       	rjmp	.-2      	; 0xbc <main+0x42>

000000be <stopTimer>:
	TCNT1 = 65530;
}

void stopTimer() {
	//Timer/Counter 1 stop
	TCCR1B &= ~(1<<CS10);
  be:	8e b5       	in	r24, 0x2e	; 46
  c0:	8e 7f       	andi	r24, 0xFE	; 254
  c2:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(1<<CS11);
  c4:	8e b5       	in	r24, 0x2e	; 46
  c6:	8d 7f       	andi	r24, 0xFD	; 253
  c8:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(1<<CS12);
  ca:	8e b5       	in	r24, 0x2e	; 46
  cc:	8b 7f       	andi	r24, 0xFB	; 251
  ce:	8e bd       	out	0x2e, r24	; 46
  d0:	08 95       	ret

000000d2 <__vector_8>:
int pointer = 0;

unsigned char voice [] = {0x64, 0x61, 0x74, 0x61, 0xe2, 0x5e, 0x0, 0x0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x7f, 0x81, 0x80, 0x80, 0x80, 0x80, 0x80, 0x81, 0x81, 0x7f, 0x80, 0x81, 0x80, 0x81, 0x80, 0x7f, 0x81, 0x81, 0x80, 0x80, 0x7f, 0x81, 0x81, 0x80, 0x80, 0x7f, 0x82, 0x81, 0x80, 0x7e, 0x81, 0x83, 0x7f, 0x7d, 0x83, 0x81, 0x7f, 0x84, 0x7f, 0x7e, 0x81, 0x83, 0x80, 0x7c, 0x81, 0x85, 0x81, 0x7d, 0x81, 0x82, 0x7e, 0x83, 0x79, 0x83, 0x84, 0x81, 0x7c, 0x80, 0x85, 0x7c, 0x83, 0x7f, 0x7c, 0x89, 0x7f, 0x7e, 0x80, 0x81, 0x84, 0x82, 0x78, 0x83, 0x85, 0x81, 0x7d, 0x80, 0x83, 0x80, 0x7f, 0x82, 0x7e, 0x84, 0x7f, 0x81, 0x7f, 0x81, 0x7f, 0x84, 0x81, 0x7d, 0x7f, 0x83, 0x7f, 0x81, 0x7e, 0x81, 0x84, 0x7e, 0x7d, 0x83, 0x80, 0x81, 0x83, 0x7d, 0x7f, 0x84, 0x80, 0x7f, 0x80, 0x82, 0x82, 0x7d, 0x7e, 0x86, 0x7e, 0x7e, 0x78, 0x94, 0x79, 0x79, 0x88, 0x7e, 0x84, 0x7c, 0x7f, 0x82, 0x84, 0x81, 0x7d, 0x7e, 0x86, 0x86, 0x74, 0x83, 0x86, 0x80, 0x7d, 0x80, 0x81, 0x82, 0x7f, 0x81, 0x82, 0x81, 0x80, 0x81, 0x7d, 0x87, 0x7f, 0x7e, 0x7e, 0x87, 0x82, 0x76, 0x87, 0x82, 0x7d, 0x8d, 0x6f, 0x83, 0x8a, 0x7a, 0x7f, 0x85, 0x88, 0x75, 0x80, 0x89, 0x79, 0x86, 0x7c, 0x83, 0x85, 0x7e, 0x82, 0x7d, 0x80, 0x82, 0x85, 0x7e, 0x7f, 0x7c, 0x86, 0x87, 0x76, 0x80, 0x85, 0x82, 0x7c, 0x8b, 0x7b, 0x78, 0x89, 0x89, 0x72, 0x80, 0x86, 0x82, 0x81, 0x81, 0x7f, 0x7b, 0x89, 0x83, 0x7d, 0x7f, 0x83, 0x86, 0x7a, 0x7f, 0x86, 0x7c, 0x81, 0x84, 0x85, 0x79, 0x82, 0x7e, 0x83, 0x82, 0x80, 0x80, 0x8c, 0x74, 0x7d, 0x91, 0x74, 0x7e, 0x7e, 0x96, 0x6e, 0x83, 0x85, 0x7b, 0x8d, 0x7d, 0x7a, 0x81, 0x86, 0x7e, 0x85, 0x79, 0x85, 0x87, 0x77, 0x84, 0x88, 0x7f, 0x77, 0x84, 0x8d, 0x7b, 0x7b, 0x84, 0x86, 0x7f, 0x7f, 0x81, 0x7f, 0x7f, 0x81, 0x83, 0x81, 0x84, 0x7e, 0x71, 0x95, 0x80, 0x6d, 0x8f, 0x87, 0x6e, 0x86, 0x88, 0x74, 0x91, 0x7b, 0x7a, 0x86, 0x87, 0x78, 0x7f, 0x85, 0x80, 0x7b, 0x81, 0x87, 0x82, 0x76, 0x85, 0x89, 0x7b, 0x7f, 0x7f, 0x87, 0x7e, 0x84, 0x89, 0x63, 0xa2, 0x8b, 0x6a, 0x6e, 0x8b, 0x9e, 0x78, 0x67, 0x85, 0x8c, 0x98, 0x68, 0x76, 0x83, 0x94, 0x81, 0x73, 0x7a, 0x8b, 0x87, 0x7d, 0x78, 0x82, 0x89, 0x80, 0x77, 0x89, 0x83, 0x7f, 0x7b, 0x84, 0x88, 0x80, 0x75, 0x84, 0x86, 0x7f, 0x81, 0x7e, 0x7f, 0x81, 0x9a, 0x71, 0x4d, 0xac, 0x99, 0x5b, 0x8c, 0xa0, 0x5c, 0x84, 0x95, 0x73, 0x77, 0x93, 0x7d, 0x79, 0x8e, 0x80, 0x6f, 0x90, 0x80, 0x7c, 0x88, 0x7e, 0x74, 0x8d, 0x88, 0x67, 0x95, 0x9a, 0x56, 0x79, 0xa6, 0x84, 0x56, 0x86, 0x96, 0x92, 0x84, 0x50, 0x95, 0x93, 0x83, 0x5d, 0x8a, 0x92, 0x7a, 0x80, 0x7a, 0x82, 0x8e, 0x77, 0x79, 0x89, 0x8e, 0x73, 0x72, 0x90, 0x8c, 0x71, 0x83, 0x7e, 0x84, 0x88, 0x84, 0x6d, 0x87, 0x8e, 0x8a, 0x72, 0x5b, 0xba, 0x75, 0x6a, 0x97, 0x68, 0x8a, 0x95, 0x71, 0x71, 0x85, 0x94, 0x7f, 0x82, 0x81, 0x69, 0xa7, 0x76, 0x6d, 0x8d, 0x79, 0x90, 0x7c, 0x7a, 0xa0, 0x40, 0xa9, 0x9d, 0x48, 0x70, 0x9e, 0xc2, 0x3a, 0x68, 0x9e, 0x98, 0x7f, 0x5b, 0x7a, 0xac, 0x7e, 0x67, 0x82, 0x96, 0x7a, 0x79, 0x7e, 0x88, 0x89, 0x73, 0x76, 0x98, 0x88, 0x68, 0x7e, 0x91, 0x80, 0x76, 0x8a, 0x75, 0x83, 0x8a, 0x79, 0x7d, 0x85, 0x81, 0x7d, 0x7a, 0xbf, 0x35, 0x89, 0xbf, 0x40, 0x7a, 0x9b, 0x6f, 0x81, 0x98, 0x79, 0x63, 0xa3, 0x84, 0x5d, 0xa0, 0x79, 0x64, 0xa0, 0x7a, 0x70, 0x8f, 0x88, 0x67, 0x8d, 0x91, 0x63, 0x7c, 0xa4, 0x89, 0x47, 0x84, 0xb1, 0x8d, 0x47, 0x84, 0xab, 0x8a, 0x6c, 0x50, 0xb6, 0x89, 0x72, 0x5f, 0xa1, 0x88, 0x6b, 0x80, 0x8f, 0x80, 0x73, 0x80, 0x83, 0x92, 0x76, 0x68, 0x8f, 0x97, 0x73, 0x72, 0x86, 0x83, 0x90, 0x77, 0x71, 0x84, 0x96, 0x75, 0x7f, 0x78, 0x66, 0xc0, 0x63, 0x5e, 0xb0, 0x67, 0x79, 0x97, 0x6f, 0x74, 0x92, 0x8e, 0x6b, 0x86, 0x86, 0x76, 0x9a, 0x6c, 0x7a, 0x8f, 0x76, 0x86, 0x77, 0x87, 0x7d, 0x82, 0x78, 0xa7, 0x93, 0x2d, 0x98, 0xbb, 0x7a, 0x36, 0x93, 0xac, 0x89, 0x51, 0x68, 0xb7, 0x87, 0x64, 0x70, 0xa2, 0x7a, 0x7c, 0x6d, 0x92, 0x81, 0x71, 0x79, 0x9c, 0x7c, 0x67, 0x92, 0x87, 0x7a, 0x81, 0x7b, 0x75, 0x93, 0x89, 0x63, 0x82, 0x92, 0x7d, 0x76, 0x79, 0xa8, 0x57, 0x67, 0xa2, 0xa8, 0x3a, 0x95, 0xb4, 0x3d, 0xa4, 0x8e, 0x4c, 0x93, 0x9a, 0x64, 0x79, 0x9e, 0x68, 0x85, 0x98, 0x60, 0x83, 0x9e, 0x68, 0x74, 0x98, 0x7c, 0x64, 0xa8, 0x78, 0x4f, 0xa5, 0xa2, 0x5c, 0x65, 0x9b, 0xa2, 0x7f, 0x50, 0x7c, 0xba, 0x65, 0x73, 0x73, 0x97, 0x81, 0x79, 0x7c, 0x8f, 0x71, 0x81, 0x8a, 0x73, 0x82, 0x7f, 0x85, 0x7a, 0x89, 0x78, 0x7d, 0x88, 0x7f, 0x80, 0x83, 0x78, 0x8a, 0x82, 0x7e, 0x7f, 0x59, 0xac, 0x9b, 0x34, 0xab, 0x83, 0x67, 0x98, 0x77, 0x67, 0x8f, 0x88, 0x72, 0x81, 0x91, 0x63, 0x9d, 0x87, 0x5a, 0x99, 0x7d, 0x73, 0x91, 0x75, 0x7f, 0x8c, 0x42, 0xc2, 0x7f, 0x38, 0x96, 0xbc, 0x84, 0x1e, 0xa8, 0xa4, 0x80, 0x65, 0x63, 0xa8, 0x8d, 0x53, 0x83, 0x9a, 0x78, 0x77, 0x8a, 0x7d, 0x6c, 0x91, 0x81, 0x7a, 0x80, 0x75, 0x87, 0x94, 0x64, 0x7e, 0x97, 0x6f, 0x7a, 0x8c, 0x7c, 0x7d, 0x83, 0x77, 0x83, 0x82, 0x8a, 0x8c, 0x47, 0xad, 0xa1, 0x30, 0x97, 0x94, 0x5d, 0x94, 0x8c, 0x60, 0x80, 0xac, 0x5c, 0x74, 0xab, 0x5d, 0x86, 0x9a, 0x5a, 0x89, 0x8a, 0x7e, 0x70, 0x8b, 0x68, 0x9c, 0x9a, 0x3c, 0x83, 0xcb, 0x47, 0x63, 0xab, 0x82, 0x6e, 0x80, 0x6a, 0xb2, 0x75, 0x56, 0xa2, 0x8a, 0x61, 0x74, 0xa3, 0x79, 0x6e, 0x79, 0x9f, 0x7d, 0x5a, 0x8e, 0x95, 0x74, 0x6c, 0x92, 0x84, 0x75, 0x81, 0x79, 0x83, 0x94, 0x6c, 0x75, 0x91, 0x97, 0x3b, 0xa2, 0xc2, 0x13, 0xb6, 0x90, 0x53, 0xae, 0x6b, 0x69, 0x9b, 0x86, 0x60, 0x7f, 0xa2, 0x4d, 0x87, 0xa9, 0x49, 0x94, 0x92, 0x73, 0x4e, 0x9e, 0xae, 0x3c, 0x8b, 0x9b, 0x8a, 0x4e};

ISR(TIMER1_OVF_vect)
{
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	2f 93       	push	r18
  de:	3f 93       	push	r19
  e0:	4f 93       	push	r20
  e2:	5f 93       	push	r21
  e4:	6f 93       	push	r22
  e6:	7f 93       	push	r23
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
  ec:	af 93       	push	r26
  ee:	bf 93       	push	r27
  f0:	ef 93       	push	r30
  f2:	ff 93       	push	r31
	stopTimer();
  f4:	e4 df       	rcall	.-56     	; 0xbe <stopTimer>
	
	OCR1A = voice[pointer];
  f6:	e0 91 c6 03 	lds	r30, 0x03C6	; 0x8003c6 <__data_end>
  fa:	f0 91 c7 03 	lds	r31, 0x03C7	; 0x8003c7 <__data_end+0x1>
  fe:	e0 5a       	subi	r30, 0xA0	; 160
 100:	ff 4f       	sbci	r31, 0xFF	; 255
 102:	80 81       	ld	r24, Z
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	9b bd       	out	0x2b, r25	; 43
 108:	8a bd       	out	0x2a, r24	; 42
	pointer++;
 10a:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <__data_end>
 10e:	90 91 c7 03 	lds	r25, 0x03C7	; 0x8003c7 <__data_end+0x1>
 112:	01 96       	adiw	r24, 0x01	; 1
 114:	90 93 c7 03 	sts	0x03C7, r25	; 0x8003c7 <__data_end+0x1>
 118:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <__data_end>
	if (pointer >= simpeSize) {
 11c:	20 91 c8 03 	lds	r18, 0x03C8	; 0x8003c8 <simpeSize>
 120:	30 91 c9 03 	lds	r19, 0x03C9	; 0x8003c9 <simpeSize+0x1>
 124:	82 17       	cp	r24, r18
 126:	93 07       	cpc	r25, r19
 128:	24 f0       	brlt	.+8      	; 0x132 <__vector_8+0x60>
		pointer = 0;
 12a:	10 92 c7 03 	sts	0x03C7, r1	; 0x8003c7 <__data_end+0x1>
 12e:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <__data_end>
	}
	
	startTimer();
 132:	95 df       	rcall	.-214    	; 0x5e <startTimer>
}
 134:	ff 91       	pop	r31
 136:	ef 91       	pop	r30
 138:	bf 91       	pop	r27
 13a:	af 91       	pop	r26
 13c:	9f 91       	pop	r25
 13e:	8f 91       	pop	r24
 140:	7f 91       	pop	r23
 142:	6f 91       	pop	r22
 144:	5f 91       	pop	r21
 146:	4f 91       	pop	r20
 148:	3f 91       	pop	r19
 14a:	2f 91       	pop	r18
 14c:	0f 90       	pop	r0
 14e:	0f be       	out	0x3f, r0	; 63
 150:	0f 90       	pop	r0
 152:	1f 90       	pop	r1
 154:	18 95       	reti

00000156 <_exit>:
 156:	f8 94       	cli

00000158 <__stop_program>:
 158:	ff cf       	rjmp	.-2      	; 0x158 <__stop_program>
