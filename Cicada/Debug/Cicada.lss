
Cicada.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000014a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000580  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004df  00000000  00000000  00000770  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000264  00000000  00000000  00000c4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000009c  00000000  00000000  00000eb4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002d2  00000000  00000000  00000f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000cb  00000000  00000000  00001222  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  000012ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	47 c0       	rjmp	.+142    	; 0xa0 <__vector_8>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	0e d0       	rcall	.+28     	; 0x50 <main>
  34:	5e c0       	rjmp	.+188    	; 0xf2 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <startTimer>:
    }
}

void startTimer() {
	//Timer/Counter 1 start 1/8
	TCCR1B |= (1<<CS10);
  38:	8e b5       	in	r24, 0x2e	; 46
  3a:	81 60       	ori	r24, 0x01	; 1
  3c:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(1<<CS11);
  3e:	8e b5       	in	r24, 0x2e	; 46
  40:	8d 7f       	andi	r24, 0xFD	; 253
  42:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(1<<CS12);
  44:	8e b5       	in	r24, 0x2e	; 46
  46:	8b 7f       	andi	r24, 0xFB	; 251
  48:	8e bd       	out	0x2e, r24	; 46

	TCNT1 = 0;
  4a:	1d bc       	out	0x2d, r1	; 45
  4c:	1c bc       	out	0x2c, r1	; 44
  4e:	08 95       	ret

00000050 <main>:
}

int main(void)
{
	//Normal PWM non-inverting mode
	TCCR1A &= ~(1<<COM1A0);
  50:	8f b5       	in	r24, 0x2f	; 47
  52:	8f 7b       	andi	r24, 0xBF	; 191
  54:	8f bd       	out	0x2f, r24	; 47
	TCCR1A |= (1<<COM1A1);
  56:	8f b5       	in	r24, 0x2f	; 47
  58:	80 68       	ori	r24, 0x80	; 128
  5a:	8f bd       	out	0x2f, r24	; 47

	//Fast PWM 8-bit
	TCCR1A |= (1<<WGM10);
  5c:	8f b5       	in	r24, 0x2f	; 47
  5e:	81 60       	ori	r24, 0x01	; 1
  60:	8f bd       	out	0x2f, r24	; 47
	TCCR1A &= ~(1<<WGM11);
  62:	8f b5       	in	r24, 0x2f	; 47
  64:	8d 7f       	andi	r24, 0xFD	; 253
  66:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= (1<<WGM12);
  68:	8e b5       	in	r24, 0x2e	; 46
  6a:	88 60       	ori	r24, 0x08	; 8
  6c:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(1<<WGM13);
  6e:	8e b5       	in	r24, 0x2e	; 46
  70:	8f 7e       	andi	r24, 0xEF	; 239
  72:	8e bd       	out	0x2e, r24	; 46

	startTimer();
  74:	e1 df       	rcall	.-62     	; 0x38 <startTimer>

	//Timer/Counter 1 overflow interrupt settings
	//Interrupt enable
	TIMSK |= (1<<2);
  76:	89 b7       	in	r24, 0x39	; 57
  78:	84 60       	ori	r24, 0x04	; 4
  7a:	89 bf       	out	0x39, r24	; 57

	// PB1 - output
	DDRB |= (1<<1);
  7c:	b9 9a       	sbi	0x17, 1	; 23
	PORTB &= ~(1<<1);
  7e:	c1 98       	cbi	0x18, 1	; 24
	OCR1A = 0;
  80:	1b bc       	out	0x2b, r1	; 43
  82:	1a bc       	out	0x2a, r1	; 42

	//Power managment - Open
	DDRD |= (1<<0);
  84:	88 9a       	sbi	0x11, 0	; 17
	PORTD |= (1<<0);
  86:	90 9a       	sbi	0x12, 0	; 18

	sei();
  88:	78 94       	sei
  8a:	ff cf       	rjmp	.-2      	; 0x8a <main+0x3a>

0000008c <stopTimer>:
	TCNT1 = 0;
}

void stopTimer() {
	//Timer/Counter 1 stop
	TCCR1B &= ~(1<<CS10);
  8c:	8e b5       	in	r24, 0x2e	; 46
  8e:	8e 7f       	andi	r24, 0xFE	; 254
  90:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(1<<CS11);
  92:	8e b5       	in	r24, 0x2e	; 46
  94:	8d 7f       	andi	r24, 0xFD	; 253
  96:	8e bd       	out	0x2e, r24	; 46
	TCCR1B &= ~(1<<CS12);
  98:	8e b5       	in	r24, 0x2e	; 46
  9a:	8b 7f       	andi	r24, 0xFB	; 251
  9c:	8e bd       	out	0x2e, r24	; 46
  9e:	08 95       	ret

000000a0 <__vector_8>:

void startTimer();
void stopTimer();

ISR(TIMER1_OVF_vect)
{
  a0:	1f 92       	push	r1
  a2:	0f 92       	push	r0
  a4:	0f b6       	in	r0, 0x3f	; 63
  a6:	0f 92       	push	r0
  a8:	11 24       	eor	r1, r1
  aa:	2f 93       	push	r18
  ac:	3f 93       	push	r19
  ae:	4f 93       	push	r20
  b0:	5f 93       	push	r21
  b2:	6f 93       	push	r22
  b4:	7f 93       	push	r23
  b6:	8f 93       	push	r24
  b8:	9f 93       	push	r25
  ba:	af 93       	push	r26
  bc:	bf 93       	push	r27
  be:	ef 93       	push	r30
  c0:	ff 93       	push	r31
	stopTimer();
  c2:	e4 df       	rcall	.-56     	; 0x8c <stopTimer>
	PORTD = !PORTD;
  c4:	92 b3       	in	r25, 0x12	; 18
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	91 11       	cpse	r25, r1
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	82 bb       	out	0x12, r24	; 18
	startTimer();
  ce:	b4 df       	rcall	.-152    	; 0x38 <startTimer>
}
  d0:	ff 91       	pop	r31
  d2:	ef 91       	pop	r30
  d4:	bf 91       	pop	r27
  d6:	af 91       	pop	r26
  d8:	9f 91       	pop	r25
  da:	8f 91       	pop	r24
  dc:	7f 91       	pop	r23
  de:	6f 91       	pop	r22
  e0:	5f 91       	pop	r21
  e2:	4f 91       	pop	r20
  e4:	3f 91       	pop	r19
  e6:	2f 91       	pop	r18
  e8:	0f 90       	pop	r0
  ea:	0f be       	out	0x3f, r0	; 63
  ec:	0f 90       	pop	r0
  ee:	1f 90       	pop	r1
  f0:	18 95       	reti

000000f2 <_exit>:
  f2:	f8 94       	cli

000000f4 <__stop_program>:
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <__stop_program>
